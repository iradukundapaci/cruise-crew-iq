// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: r6SzurXsLMJXPqEBWV3sKk
// Component: l7PfJ2noRmZC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 8V9ZObcqgPEi/component
import Footer from "../../Footer"; // plasmic-import: tfXGV_GyVRZh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: r6SzurXsLMJXPqEBWV3sKk/projectcss
import sty from "./PlasmicExpore.module.css"; // plasmic-import: l7PfJ2noRmZC/css

createPlasmicElementProxy;

export type PlasmicExpore__VariantMembers = {};
export type PlasmicExpore__VariantsArgs = {};
type VariantPropType = keyof PlasmicExpore__VariantsArgs;
export const PlasmicExpore__VariantProps = new Array<VariantPropType>();

export type PlasmicExpore__ArgsType = {};
type ArgPropType = keyof PlasmicExpore__ArgsType;
export const PlasmicExpore__ArgProps = new Array<ArgPropType>();

export type PlasmicExpore__OverridesType = {
  explore?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  frame23?: Flex__<"div">;
  frame279?: Flex__<"div">;
  item1?: Flex__<"div">;
  rectangle22?: Flex__<"div">;
  details?: Flex__<"div">;
  rectangle23?: Flex__<"div">;
  rectangle24?: Flex__<"div">;
  item2?: Flex__<"div">;
  rectangle25?: Flex__<"div">;
  details2?: Flex__<"div">;
  rectangle26?: Flex__<"div">;
  rectangle27?: Flex__<"div">;
  item3?: Flex__<"div">;
  rectangle28?: Flex__<"div">;
  details3?: Flex__<"div">;
  rectangle29?: Flex__<"div">;
  rectangle30?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultExporeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExpore__RenderFunc(props: {
  variants: PlasmicExpore__VariantsArgs;
  args: PlasmicExpore__ArgsType;
  overrides: PlasmicExpore__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"explore"}
          data-plasmic-override={overrides.explore}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.explore
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"frame23"}
            data-plasmic-override={overrides.frame23}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame23)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"frame279"}
            data-plasmic-override={overrides.frame279}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame279)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dyFzc
              )}
            >
              {"Take a tour"}
            </div>
            <div
              data-plasmic-name={"item1"}
              data-plasmic-override={overrides.item1}
              className={classNames(projectcss.all, sty.item1)}
            >
              <div
                data-plasmic-name={"rectangle22"}
                data-plasmic-override={overrides.rectangle22}
                className={classNames(projectcss.all, sty.rectangle22)}
              />

              <div
                data-plasmic-name={"details"}
                data-plasmic-override={overrides.details}
                className={classNames(projectcss.all, sty.details)}
              >
                <div
                  data-plasmic-name={"rectangle23"}
                  data-plasmic-override={overrides.rectangle23}
                  className={classNames(projectcss.all, sty.rectangle23)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Dao0
                  )}
                >
                  {"Luxurious rooms"}
                </div>
                <div
                  data-plasmic-name={"rectangle24"}
                  data-plasmic-override={overrides.rectangle24}
                  className={classNames(projectcss.all, sty.rectangle24)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eVCaZ
                  )}
                >
                  {
                    "The elegant luxury bedrooms in this gallery showcase custom interior designs & decorating ideas. View pictures and find your perfect luxury bedroom design.Luxurious bedrooms that will make you never want to leave your room again. See more ideas about luxurious bedrooms, bedroom design"
                  }
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"item2"}
              data-plasmic-override={overrides.item2}
              className={classNames(projectcss.all, sty.item2)}
            >
              <div
                data-plasmic-name={"rectangle25"}
                data-plasmic-override={overrides.rectangle25}
                className={classNames(projectcss.all, sty.rectangle25)}
              />

              <div
                data-plasmic-name={"details2"}
                data-plasmic-override={overrides.details2}
                className={classNames(projectcss.all, sty.details2)}
              >
                <div
                  data-plasmic-name={"rectangle26"}
                  data-plasmic-override={overrides.rectangle26}
                  className={classNames(projectcss.all, sty.rectangle26)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zsFMp
                  )}
                >
                  {"Gym center"}
                </div>
                <div
                  data-plasmic-name={"rectangle27"}
                  data-plasmic-override={overrides.rectangle27}
                  className={classNames(projectcss.all, sty.rectangle27)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sfbLc
                  )}
                >
                  {
                    "The elegant luxury bedrooms in this gallery showcase custom interior designs & decorating ideas. View pictures and find your perfect luxury bedroom design.Luxurious bedrooms that will make you never want to leave your room again. See more ideas about luxurious bedrooms, bedroom design"
                  }
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"item3"}
              data-plasmic-override={overrides.item3}
              className={classNames(projectcss.all, sty.item3)}
            >
              <div
                data-plasmic-name={"rectangle28"}
                data-plasmic-override={overrides.rectangle28}
                className={classNames(projectcss.all, sty.rectangle28)}
              />

              <div
                data-plasmic-name={"details3"}
                data-plasmic-override={overrides.details3}
                className={classNames(projectcss.all, sty.details3)}
              >
                <div
                  data-plasmic-name={"rectangle29"}
                  data-plasmic-override={overrides.rectangle29}
                  className={classNames(projectcss.all, sty.rectangle29)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o9MYa
                  )}
                >
                  {"Restaurant"}
                </div>
                <div
                  data-plasmic-name={"rectangle30"}
                  data-plasmic-override={overrides.rectangle30}
                  className={classNames(projectcss.all, sty.rectangle30)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a6Fb9
                  )}
                >
                  {
                    "The elegant luxury bedrooms in this gallery showcase custom interior designs & decorating ideas. View pictures and find your perfect luxury bedroom design.Luxurious bedrooms that will make you never want to leave your room again. See more ideas about luxurious bedrooms, bedroom design"
                  }
                </div>
              </div>
            </div>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  explore: [
    "explore",
    "navbar",
    "frame23",
    "frame279",
    "item1",
    "rectangle22",
    "details",
    "rectangle23",
    "rectangle24",
    "item2",
    "rectangle25",
    "details2",
    "rectangle26",
    "rectangle27",
    "item3",
    "rectangle28",
    "details3",
    "rectangle29",
    "rectangle30",
    "footer"
  ],
  navbar: ["navbar"],
  frame23: ["frame23"],
  frame279: [
    "frame279",
    "item1",
    "rectangle22",
    "details",
    "rectangle23",
    "rectangle24",
    "item2",
    "rectangle25",
    "details2",
    "rectangle26",
    "rectangle27",
    "item3",
    "rectangle28",
    "details3",
    "rectangle29",
    "rectangle30"
  ],
  item1: ["item1", "rectangle22", "details", "rectangle23", "rectangle24"],
  rectangle22: ["rectangle22"],
  details: ["details", "rectangle23", "rectangle24"],
  rectangle23: ["rectangle23"],
  rectangle24: ["rectangle24"],
  item2: ["item2", "rectangle25", "details2", "rectangle26", "rectangle27"],
  rectangle25: ["rectangle25"],
  details2: ["details2", "rectangle26", "rectangle27"],
  rectangle26: ["rectangle26"],
  rectangle27: ["rectangle27"],
  item3: ["item3", "rectangle28", "details3", "rectangle29", "rectangle30"],
  rectangle28: ["rectangle28"],
  details3: ["details3", "rectangle29", "rectangle30"],
  rectangle29: ["rectangle29"],
  rectangle30: ["rectangle30"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  explore: "div";
  navbar: typeof Navbar;
  frame23: "div";
  frame279: "div";
  item1: "div";
  rectangle22: "div";
  details: "div";
  rectangle23: "div";
  rectangle24: "div";
  item2: "div";
  rectangle25: "div";
  details2: "div";
  rectangle26: "div";
  rectangle27: "div";
  item3: "div";
  rectangle28: "div";
  details3: "div";
  rectangle29: "div";
  rectangle30: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExpore__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExpore__VariantsArgs;
    args?: PlasmicExpore__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExpore__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicExpore__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicExpore__ArgProps,
          internalVariantPropNames: PlasmicExpore__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExpore__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "explore") {
    func.displayName = "PlasmicExpore";
  } else {
    func.displayName = `PlasmicExpore.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "r6SzurXsLMJXPqEBWV3sKk"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicExpore = Object.assign(
  // Top-level PlasmicExpore renders the root element
  withUsePlasmicAuth(makeNodeComponent("explore")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    frame23: makeNodeComponent("frame23"),
    frame279: makeNodeComponent("frame279"),
    item1: makeNodeComponent("item1"),
    rectangle22: makeNodeComponent("rectangle22"),
    details: makeNodeComponent("details"),
    rectangle23: makeNodeComponent("rectangle23"),
    rectangle24: makeNodeComponent("rectangle24"),
    item2: makeNodeComponent("item2"),
    rectangle25: makeNodeComponent("rectangle25"),
    details2: makeNodeComponent("details2"),
    rectangle26: makeNodeComponent("rectangle26"),
    rectangle27: makeNodeComponent("rectangle27"),
    item3: makeNodeComponent("item3"),
    rectangle28: makeNodeComponent("rectangle28"),
    details3: makeNodeComponent("details3"),
    rectangle29: makeNodeComponent("rectangle29"),
    rectangle30: makeNodeComponent("rectangle30"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicExpore
    internalVariantProps: PlasmicExpore__VariantProps,
    internalArgProps: PlasmicExpore__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicExpore;
/* prettier-ignore-end */
