// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: r6SzurXsLMJXPqEBWV3sKk
// Component: 8V9ZObcqgPEi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: ZnawCEiEef_q/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: r6SzurXsLMJXPqEBWV3sKk/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: 8V9ZObcqgPEi/css

import Ship2SvgrepoComSvgIcon from "./icons/PlasmicIcon__Ship2SvgrepoComSvg"; // plasmic-import: AfWZUvpHcNEt/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: Qq1FXu4GY4-r/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 7K_FDOqoJba3/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {
  home: "home";
  explore: "explore";
  rooms: "rooms";
  about: "about";
  contact: "contact";
};
export type PlasmicNavbar__VariantsArgs = {
  home?: SingleBooleanChoiceArg<"home">;
  explore?: SingleBooleanChoiceArg<"explore">;
  rooms?: SingleBooleanChoiceArg<"rooms">;
  about?: SingleBooleanChoiceArg<"about">;
  contact?: SingleBooleanChoiceArg<"contact">;
};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "home",
  "explore",
  "rooms",
  "about",
  "contact"
);

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  navbar?: Flex__<"div">;
  svg?: Flex__<"svg">;
  links?: Flex__<"div">;
  booking?: Flex__<"a"> & Partial<LinkProps>;
  button?: Flex__<typeof Button>;
};

export interface DefaultNavbarProps {
  home?: SingleBooleanChoiceArg<"home">;
  explore?: SingleBooleanChoiceArg<"explore">;
  rooms?: SingleBooleanChoiceArg<"rooms">;
  about?: SingleBooleanChoiceArg<"about">;
  contact?: SingleBooleanChoiceArg<"contact">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "home",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.home
      },
      {
        path: "explore",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.explore
      },
      {
        path: "rooms",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rooms
      },
      {
        path: "about",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.about
      },
      {
        path: "contact",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contact
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"navbar"}
      data-plasmic-override={overrides.navbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.navbar,
        {
          [sty.navbarabout]: hasVariant($state, "about", "about"),
          [sty.navbarcontact]: hasVariant($state, "contact", "contact"),
          [sty.navbarexplore]: hasVariant($state, "explore", "explore"),
          [sty.navbarhome]: hasVariant($state, "home", "home"),
          [sty.navbarrooms]: hasVariant($state, "rooms", "rooms")
        }
      )}
    >
      <Ship2SvgrepoComSvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"links"}
        data-plasmic-override={overrides.links}
        hasGap={true}
        className={classNames(projectcss.all, sty.links, {
          [sty.linkshome]: hasVariant($state, "home", "home")
        })}
      >
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__x7Hk0,
            {
              [sty.linkabout__x7Hk0QAroH]: hasVariant($state, "about", "about"),
              [sty.linkcontact__x7Hk0BiP3W]: hasVariant(
                $state,
                "contact",
                "contact"
              ),
              [sty.linkexplore__x7Hk0YOpvs]: hasVariant(
                $state,
                "explore",
                "explore"
              ),
              [sty.linkhome__x7Hk059Ha3]: hasVariant($state, "home", "home"),
              [sty.linkrooms__x7Hk0YHzSu]: hasVariant($state, "rooms", "rooms")
            }
          )}
          component={Link}
          href={hasVariant($state, "home", "home") ? `/` : `/`}
          platform={"nextjs"}
        >
          {"Home"}
        </PlasmicLink__>
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__qf7Kb,
            {
              [sty.linkcontact__qf7KbBiP3W]: hasVariant(
                $state,
                "contact",
                "contact"
              ),
              [sty.linkexplore__qf7KbyOpvs]: hasVariant(
                $state,
                "explore",
                "explore"
              ),
              [sty.linkhome__qf7Kb59Ha3]: hasVariant($state, "home", "home")
            }
          )}
          component={Link}
          href={hasVariant($state, "home", "home") ? `/expore` : `/expore`}
          platform={"nextjs"}
        >
          {"Explore"}
        </PlasmicLink__>
        <PlasmicLink__
          data-plasmic-name={"booking"}
          data-plasmic-override={overrides.booking}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.booking,
            {
              [sty.bookingcontact]: hasVariant($state, "contact", "contact"),
              [sty.bookingexplore]: hasVariant($state, "explore", "explore"),
              [sty.bookinghome]: hasVariant($state, "home", "home")
            }
          )}
          component={Link}
          href={hasVariant($state, "home", "home") ? `/expore` : `/booking`}
          platform={"nextjs"}
        >
          {"Booking"}
        </PlasmicLink__>
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__jpT5N,
            {
              [sty.linkcontact__jpT5NBiP3W]: hasVariant(
                $state,
                "contact",
                "contact"
              ),
              [sty.linkexplore__jpT5NyOpvs]: hasVariant(
                $state,
                "explore",
                "explore"
              ),
              [sty.linkhome__jpT5N59Ha3]: hasVariant($state, "home", "home"),
              [sty.linkrooms__jpT5NyHzSu]: hasVariant($state, "rooms", "rooms")
            }
          )}
          component={Link}
          href={hasVariant($state, "home", "home") ? `/expore` : `/rooms`}
          platform={"nextjs"}
        >
          {"Rooms"}
        </PlasmicLink__>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          onClick={async event => {
            const $steps = {};

            $steps["goToHttpLocalhost3000AuthSignIn"] = true
              ? (() => {
                  const actionArgs = {
                    destination: "http://localhost:3000/auth/sign-in"
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHttpLocalhost3000AuthSignIn"] != null &&
              typeof $steps["goToHttpLocalhost3000AuthSignIn"] === "object" &&
              typeof $steps["goToHttpLocalhost3000AuthSignIn"].then ===
                "function"
            ) {
              $steps["goToHttpLocalhost3000AuthSignIn"] = await $steps[
                "goToHttpLocalhost3000AuthSignIn"
              ];
            }
          }}
        >
          {"Login"}
        </Button>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navbar: ["navbar", "svg", "links", "booking", "button"],
  svg: ["svg"],
  links: ["links", "booking", "button"],
  booking: ["booking"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navbar: "div";
  svg: "svg";
  links: "div";
  booking: "a";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbar") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("navbar"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    links: makeNodeComponent("links"),
    booking: makeNodeComponent("booking"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
